#!/usr/bin/env python# -*- coding: utf-8 -*-# import platform# print(platform.python_version())__author__ = 'Alex Konkov'import sysfrom os import path, getcwdfrom PyQt5.QtWidgets import (    QApplication, QMainWindow, QWidget, QMessageBox, QGridLayout, QSplitter, QPushButton,    QFileDialog)from PyQt5.QtCore import QSize, QCoreApplicationfrom PyQt5.QtGui import QIconfrom uiWidgets import TableWidget, SrcFrame, LoadingLabel, ProgressBarfrom uiCustomWidgets import LogoFrame, ControlsFrame, LogTablefrom menu import MenuBar, MenuConffrom locales import titleLocales, actionLocalesfrom uiWidgets.styles import splitter as splitter_stylesfrom constants import sprActions, settingsActions, baseActions, errTypesfrom core.settingsHolders import SpravHolderfrom threads import BaseActivityThreadproject_dir = getcwd()class ExpWindow(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.setMinimumSize(QSize(640, 480))        self.resize(1400, 840)        self.setWindowTitle("Explication 2.0")        central_widget = QWidget(self)        self.setCentralWidget(central_widget)        self.controls_frame = ControlsFrame(self)        self.controls_frame.hide()        self.log_table = LogTable(central_widget)        self.control_table = TableWidget(central_widget, headers=titleLocales.control_table_head)        # self.convert_table = TableWidget(central_widget, headers=titleLocales.convert_table_head        self.src_frame = SrcFrame(self, title=titleLocales.src_frame_default, on_select=self.on_file_opened)        self.init_widgets_positions(central_widget)        self.init_menu_bar()        self.setWindowIcon(QIcon(path.join(project_dir, 'Images\exp.png')))        self.__from_session = False        self.baseThread = BaseActivityThread(            self, error_handler=self.handle_base_activity_error,            success_handler=self.handle_base_activity_success)        self.loading_process_label = LoadingLabel(self)        self.statusBar().addPermanentWidget(self.loading_process_label)        self.sprav_holder = SpravHolder()        self.run_sprav_action(sprActions.SET_DEFAULT)    def handle_base_activity_success(self, result):        action_id = self.baseThread.current_action        if action_id == baseActions.LOAD_DB:            self.src_frame.set_src_text()            self.finish_loading(actionLocales.get_success_log(action_id))    def handle_base_activity_error(self, error):        if error.type == errTypes.control_warning:            self.show_error_modal(error.message)            return        self.finish_loading(error.message)    def show_error_modal(self, err_text):        QMessageBox.critical(self, titleLocales.error_modal_title, err_text, QMessageBox.Ok)    def run_base_action(self, action_id, **kvargs):        loading_messge = actionLocales.get_loading_msg(action_id)        log_message = actionLocales.get_start_log(action_id)        self.show_loading(loading_messge, log_message)        self.baseThread.start(action_id, kvargs)    def show_loading(self, message='', log_message=''):        self.loading_process_label.start_loading(message)        self.controls_frame.disable_buttons()        if log_message:            self.add_event_log(log_message)    def finish_loading(self, log_message=''):        self.controls_frame.enable_buttons()        self.loading_process_label.stop_loading()        self.statusBar().showMessage('Ready')        if log_message:            self.add_event_log(log_message)    def add_event_log(self, log_msg, with_time=True):        if with_time:            self.log_table.add_row(log_msg)        else:            self.log_table.add_row(log_msg, '- // -')    def init_menu_bar(self):        menu = MenuBar(self)        file_section_key = menu.create_section(titleLocales.menu_1, 1)        sprav_section_key = menu.create_section(titleLocales.menu_2, 2)        settings_section_key = menu.create_section(titleLocales.menu_3, 3)        menu.init_sections()        menu.add_section_action(            file_section_key, MenuConf.open_file,            self.src_frame.click_file_selection)        menu.add_section_action(            file_section_key, MenuConf.quit_app,            QCoreApplication.instance().quit)        menu.add_section_action(            sprav_section_key, MenuConf.spr_default,            lambda x: self.run_sprav_action(sprActions.SET_DEFAULT))        menu.add_section_action(            sprav_section_key, MenuConf.spr_pkl,            lambda x: self.run_sprav_action(sprActions.CHOOSE_PKL))        menu.add_section_action(            sprav_section_key, MenuConf.spr_mdb,            lambda x: self.run_sprav_action(sprActions.CHOOSE_MDB))        menu.add_section_action(            sprav_section_key, MenuConf.spr_save,            lambda x: self.run_sprav_action(sprActions.SAVE))        menu.add_section_action(            sprav_section_key, MenuConf.spr_info,            lambda x: self.run_sprav_action(sprActions.INFO))        menu.add_section_action(            settings_section_key, MenuConf.settings_xls,            lambda x: self.run_settings_action(settingsActions.SHOW_XLS))        menu.add_section_action(            settings_section_key, MenuConf.settings_balance,            lambda x: self.run_settings_action(settingsActions.SHOW_BALANCE))        menu.add_section_action(            settings_section_key, MenuConf.settings_accuracy,            lambda x: self.run_settings_action(settingsActions.SHOW_ACCURACY))        menu.add_section_action(            settings_section_key, MenuConf.settings_conditions,            lambda x: self.run_settings_action(settingsActions.SHOW_CONDITIONS))    def run_sprav_action(self, action_type):        if action_type == sprActions.SET_DEFAULT:            return self.run_base_action(baseActions.LOAD_PKL_SPRAV,                                        sprav_holder=self.sprav_holder)        if action_type == sprActions.CHOOSE_PKL:            sprav_source = self.get_file_path(titleLocales.load_sprav_source_finder_title + '*.pkl')            if sprav_source:                self.run_base_action(baseActions.LOAD_PKL_SPRAV,                                     sprav_path=sprav_source,                                     sprav_holder=self.sprav_holder)            return        if action_type == sprActions.CHOOSE_MDB:            sprav_source = self.get_file_path(titleLocales.load_sprav_source_finder_title + '*.mdb')            if sprav_source:                self.run_base_action(baseActions.LOAD_MDB_SPRAV,                                     sprav_holder=self.sprav_holder,                                     sprav_path=sprav_source)            return    def get_file_path(self, dialog_title):        selected = QFileDialog(self).getOpenFileName(            self, dialog_title, project_dir,            options=QFileDialog.DontUseNativeDialog)        return selected[0]    def run_settings_action(self, action_type):        print(action_type)    def init_widgets_positions(self, central_widget):        main_grid = QGridLayout(central_widget)        central_widget.setLayout(main_grid)        splitter = self.init_splitter()        logo = LogoFrame(self, titleLocales.logo)        main_grid.addWidget(logo, 0, 0, 1, 11)        main_grid.addWidget(self.src_frame, 1, 0, 1, 2)        main_grid.addWidget(self.controls_frame, 2, 0, 6, 2)        main_grid.addWidget(self.controls_frame, 2, 0, 6, 2)        main_grid.addWidget(splitter, 1, 2, 15, 11)    def init_splitter(self):        splitter = QSplitter(self)        splitter.setStyleSheet(splitter_styles)        # splitter.addWidget(self.expa_widget)        splitter.addWidget(self.control_table)        # splitter.addWidget(self.convert_table)        splitter.addWidget(self.log_table)        return splitter    def on_file_opened(self, file_path):        splitted = path.splitext(file_path)        extension = splitted[-1]        supported_actions = {            '.mdb': baseActions.LOAD_DB,            '.pkl': baseActions.LOAD_PKL_SESSION,        }        if extension in supported_actions:            self.run_base_action(supported_actions[extension], file_path=file_path)        else:            self.show_error('wrong file')if __name__ == "__main__":    app = QApplication(sys.argv)    mainWin = ExpWindow()    mainWin.show()    sys.exit(app.exec_())