#!/usr/bin/env python# -*- coding: utf-8 -*-# import platform# print(platform.python_version())__author__ = 'Alex Konkov'import sysfrom os import path, getcwdfrom PyQt5.QtWidgets import (    QApplication, QMainWindow, QWidget, QMessageBox, QGridLayout, QSplitter,    QFileDialog)from PyQt5.QtCore import QSize, QCoreApplicationfrom PyQt5.QtGui import QIconfrom uiWidgets import TableWidget, SrcFrame, LoadingLabel, ProgressBarfrom uiCustomWidgets import LogoFrame, ControlsFrame, LogTablefrom menu import MenuBar, MenuConffrom locales import titleLocales, actionLocales, customErrorsfrom uiWidgets.styles import splitter as splitter_stylesfrom constants import sprActions, settingsActions, errTypes, coreFiles, baseActions, expActions,\    extractionActions, controlsStatesfrom core.settingsHolders import SpravHolder, SettingsHolderfrom threads import BaseActivityThread, ExtractionThread, ExplicationThreadproject_dir = getcwd()class ExpWindow(QMainWindow):    def __init__(self):        QMainWindow.__init__(self)        self.setMinimumSize(QSize(640, 480))        self.resize(1400, 840)        self.setWindowTitle("Explication 2.0")        central_widget = QWidget(self)        self.setCentralWidget(central_widget)        self.controls_frame = ControlsFrame(self, on_click=self.handle_controls_click)        self.controls_frame.hide()        self.log_table = LogTable(central_widget)        self.control_table = TableWidget(central_widget, headers=titleLocales.control_table_head)        self.convert_table = TableWidget(central_widget, headers=titleLocales.convert_table_head)        self.src_frame = SrcFrame(self, title=titleLocales.src_frame_default, on_select=self.on_file_opened)        self.init_widgets_positions(central_widget)        self.init_menu_bar()        self.setWindowIcon(QIcon(path.join(project_dir, 'Images\exp.png')))        self._from_session = False        self.baseThread = BaseActivityThread(            self, error_handler=self.handle_activity_error,            success_handler=self.handle_base_activity_success)        self.extractionThread = ExtractionThread(            self, error_handler=self.handle_activity_error,            warnings_handler=self.handle_extraction_warnings,            success_handler=self.handle_extraction_success)        self.explicationThread = ExplicationThread(            self, error_handler=self.handle_activity_error,            success_handler=self.handle_explication_success)        self.loading_process_label = LoadingLabel(self)        self.statusBar().addPermanentWidget(self.loading_process_label)        self.clear_workspace(controlsStates.INITIAL)        self.sprav_holder = SpravHolder()        self.settings_holder = SettingsHolder(coreFiles.xls_templates_dir, coreFiles.spr_default_path)        self.explication_data = None        self.exp_a_maker = None        self.run_sprav_action(sprActions.SET_DEFAULT)    def show_modal(self, message, modal_type='error', title=titleLocales.error_modal_title):        if modal_type == 'error':            QMessageBox.critical(self, title, message, QMessageBox.Ok)        if modal_type == 'warning':            QMessageBox.warning(self, title, message, QMessageBox.Ok)        elif modal_type == 'information':            QMessageBox.information(self, title, message, QMessageBox.Ok)        elif modal_type == 'question':            QMessageBox.question(self, title, message, QMessageBox.Ok)    def show_loading(self, message='', log_message=''):        self.loading_process_label.start_loading(message)        self.controls_frame.set_state(controlsStates.LOADING)        if log_message:            self.add_event_log(log_message)    def finish_loading(self, log_message=''):        self.controls_frame.set_previous_state()        self.loading_process_label.stop_loading()        self.statusBar().showMessage('Ready')        if log_message:            self.add_event_log(log_message)    def add_event_log(self, log_msg, with_time=True):        if with_time:            self.log_table.add_row(log_msg)        else:            self.log_table.add_row(log_msg, '- // -')    def init_menu_bar(self):        menu = MenuBar(self)        file_section_key = menu.create_section(titleLocales.menu_1, 1)        sprav_section_key = menu.create_section(titleLocales.menu_2, 2)        settings_section_key = menu.create_section(titleLocales.menu_3, 3)        menu.init_sections()        menu.add_section_action(            file_section_key, MenuConf.open_file,            self.src_frame.click_file_selection)        menu.add_section_action(            file_section_key, MenuConf.quit_app,            QCoreApplication.instance().quit)        menu.add_section_action(            sprav_section_key, MenuConf.spr_default,            lambda x: self.run_sprav_action(sprActions.SET_DEFAULT))        menu.add_section_action(            sprav_section_key, MenuConf.spr_pkl,            lambda x: self.run_sprav_action(sprActions.CHOOSE_PKL))        menu.add_section_action(            sprav_section_key, MenuConf.spr_mdb,            lambda x: self.run_sprav_action(sprActions.CHOOSE_MDB))        menu.add_section_action(            sprav_section_key, MenuConf.spr_save,            lambda x: self.run_sprav_action(sprActions.SAVE))        menu.add_section_action(            sprav_section_key, MenuConf.spr_info,            lambda x: self.run_sprav_action(sprActions.INFO))        menu.add_section_action(            settings_section_key, MenuConf.settings_xls,            lambda x: self.run_settings_action(settingsActions.SHOW_XLS))        menu.add_section_action(            settings_section_key, MenuConf.settings_balance,            lambda x: self.run_settings_action(settingsActions.SHOW_BALANCE))        menu.add_section_action(            settings_section_key, MenuConf.settings_accuracy,            lambda x: self.run_settings_action(settingsActions.SHOW_ACCURACY))        menu.add_section_action(            settings_section_key, MenuConf.settings_conditions,            lambda x: self.run_settings_action(settingsActions.SHOW_CONDITIONS))    def run_sprav_action(self, action_type):        if action_type == sprActions.SET_DEFAULT:            return self.run_base_action(baseActions.LOAD_PKL_SPRAV,                                        settings_holder=self.settings_holder,                                        sprav_holder=self.sprav_holder)        elif action_type == sprActions.CHOOSE_PKL:            sprav_source = self.get_file_path(titleLocales.load_sprav_source_finder_title + '*.pkl',                                              f_extension="*.pkl")            if sprav_source:                self.run_base_action(baseActions.LOAD_PKL_SPRAV,                                     sprav_path=sprav_source,                                     settings_holder=self.settings_holder,                                     sprav_holder=self.sprav_holder)        elif action_type == sprActions.CHOOSE_MDB:            sprav_source = self.get_file_path(titleLocales.load_sprav_source_finder_title + '*.mdb')            if sprav_source:                self.run_base_action(baseActions.LOAD_MDB_SPRAV,                                     sprav_holder=self.sprav_holder,                                     sprav_path=sprav_source)        elif action_type == sprActions.SAVE:            if not self.sprav_holder.current_sprav_data:                self.show_modal(customErrors.spr_not_loaded)                return            save_as = self.get_file_path(titleLocales.save_sprav_source_finder_title, save=True)            self.run_base_action(baseActions.SAVE_SPRAV,                                 sprav_data=self.sprav_holder.current_sprav_data,                                 settings_data=self.settings_holder.get_settings_dict(),                                 save_as=save_as)        elif action_type == sprActions.INFO:            info = self.sprav_holder.get_info()            if info:                self.show_modal(info, modal_type="information", title=titleLocales.spr_info)            else:                self.show_modal(customErrors.spr_not_loaded)    def run_base_action(self, action_id, **kvargs):        loading_messge = actionLocales.get_loading_msg(action_id)        log_message = actionLocales.get_start_log(action_id)        self.show_loading(loading_messge, log_message)        self.baseThread.start(action_id, kvargs)    def handle_controls_click(self, action_id):        loading_messge = actionLocales.get_loading_msg(action_id)        log_message = actionLocales.get_start_log(action_id)        self.show_loading(loading_messge, log_message)        # todo: refactor, check output file for exp actions        if action_id == extractionActions.CONTROL:            self.extractionThread.start(action_id, sprav_holder=self.sprav_holder, db_file=self.src_frame.selected_file)        elif action_id == extractionActions.CONVERTATION:            self.extractionThread.start(action_id, sprav_holder=self.sprav_holder, settings_holder=self.settings_holder)        elif action_id == expActions.EXP_A_SINGLE:            self.explicationThread.start(action_id, sprav_holder=self.sprav_holder, settings_holder=self.settings_holder)        elif action_id == expActions.EXP_A_SV:            self.explicationThread.start(action_id, sprav_holder=self.sprav_holder, settings_holder=self.settings_holder)        elif action_id == expActions.EXP_B:            self.explicationThread.start(action_id, sprav_holder=self.sprav_holder, settings_holder=self.settings_holder)    def initialize_exp_a_maker(self, exp_data, with_log=True):        action_id = expActions.INIT_A_MAKER        if with_log:            loading_messge = actionLocales.get_loading_msg(action_id)            log_message = actionLocales.get_start_log(action_id)            self.show_loading(loading_messge, log_message)        self.explicationThread.start(action_id,                                     sprav_holder=self.sprav_holder,                                     **exp_data)    def handle_base_activity_success(self, result):        action_id = self.baseThread.current_action        if action_id == baseActions.LOAD_DB:            self.finish_loading(actionLocales.get_success_log(action_id))            self.set_sources_initialized()        elif action_id == baseActions.LOAD_PKL_SPRAV:            self.finish_loading(actionLocales.get_success_log(action_id))        elif action_id == baseActions.LOAD_MDB_SPRAV:            self.finish_loading(actionLocales.get_success_log(action_id))        elif action_id == baseActions.SAVE_SPRAV:            self.finish_loading(actionLocales.get_success_log(action_id))    def handle_extraction_success(self, result):        action_id = self.extractionThread.current_action        self.finish_loading(actionLocales.get_success_log(action_id))        if action_id == extractionActions.CONTROL:            self.control_table.clear_rows(hide=True)            self.controls_frame.set_state(controlsStates.CONTROL_PASSED)        elif action_id == extractionActions.CONVERTATION:            self.convert_table.clear_rows(hide=True)            self.controls_frame.set_state(controlsStates.CONVERTATION_PASSED)            self.explication_data = {                "rows": result[0],                "users": result[1],                "soato": result[2],                "options": result[3]            }            self.initialize_exp_a_maker(self.explication_data)            print(self.explication_data)    def handle_explication_success(self, result):        action_id = self.explicationThread.current_action        if action_id == expActions.INIT_A_MAKER:            self.exp_a_maker = result            self.finish_loading(actionLocales.get_success_log(action_id))        if action_id == expActions.EXP_A_SINGLE:            self.finish_loading(actionLocales.get_success_log(action_id))        elif action_id == expActions.EXP_A_SV:            self.finish_loading(actionLocales.get_success_log(action_id))        elif action_id == expActions.EXP_B:            self.finish_loading(actionLocales.get_success_log(action_id))    def handle_extraction_warnings(self, warnings):        action_id = self.extractionThread.current_action        if action_id == extractionActions.CONTROL:            self.control_table.add_control_protocol(warnings)            self.controls_frame.set_state(controlsStates.CONTROL_FAILED)        elif action_id == extractionActions.CONVERTATION:            self.convert_table.add_convert_protocol(warnings)            self.controls_frame.set_state(controlsStates.CONVERTATION_FAILED)    def handle_activity_error(self, error):        if error.type == errTypes.control_warning:            self.show_modal(error.message)            return        error_log = actionLocales.get_error_log(error.action_id)        try:            self.show_modal(error.message)        except:            self.show_modal(str(error))        if error_log:            self.finish_loading(error_log)    def get_file_path(self, dialog_title, save=False, f_extension="*.mdb"):        options = QFileDialog.DontUseNativeDialog        if save:            selected = QFileDialog(self).getSaveFileName(self, dialog_title, options=options)        else:            selected = QFileDialog(self).getOpenFileName(self, dialog_title, project_dir,                                                         "Valid files (%s);; All files (*)" % f_extension,                                                         options=options)        return selected[0]    def run_settings_action(self, action_type):        print(action_type)    def init_widgets_positions(self, central_widget):        main_grid = QGridLayout(central_widget)        central_widget.setLayout(main_grid)        splitter = self.init_splitter()        logo = LogoFrame(self, titleLocales.logo)        main_grid.addWidget(logo, 0, 0, 1, 11)        main_grid.addWidget(self.src_frame, 1, 0, 1, 2)        main_grid.addWidget(self.controls_frame, 2, 0, 6, 2)        main_grid.addWidget(self.controls_frame, 2, 0, 6, 2)        main_grid.addWidget(splitter, 1, 2, 15, 11)    def init_splitter(self):        splitter = QSplitter(self)        splitter.setStyleSheet(splitter_styles)        # splitter.addWidget(self.expa_widget)        splitter.addWidget(self.control_table)        splitter.addWidget(self.convert_table)        splitter.addWidget(self.log_table)        return splitter    def on_file_opened(self, file_path):        splitted = path.splitext(file_path)        extension = splitted[-1]        supported_actions = {            '.mdb': baseActions.LOAD_DB,            '.pkl': baseActions.LOAD_PKL_SESSION,        }        if extension in supported_actions:            self.run_base_action(supported_actions[extension], file_path=file_path)        else:            self.show_error('wrong file')    def set_sources_initialized(self, from_session=False):        self.src_frame.set_src_text()        self._from_session = from_session        if from_session:            self.clear_workspace(controlsStates.SESSION_LOADED)        else:            self.clear_workspace(controlsStates.DB_LOADED)            self.add_event_log(actionLocales.db_has_data % path.basename(self.src_frame.selected_file), with_time=False)    def clear_workspace(self, controls_state):        self.controls_frame.set_state(controls_state)        self.control_table.clear_rows(hide=True)        self.convert_table.clear_rows(hide=True)        # if self._from_session:if __name__ == "__main__":    app = QApplication(sys.argv)    mainWin = ExpWindow()    mainWin.show()    sys.exit(app.exec_())